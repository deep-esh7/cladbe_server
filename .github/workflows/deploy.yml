name: Deploy to Server
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install expect
        run: sudo apt-get install -y expect

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          mkdir -p ~/.ssh
          # Write key directly using echo
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/github_deploy
          chmod 600 ~/.ssh/github_deploy

          # Debug: Verify key file
          echo "=== Key File Info ==="
          ls -la ~/.ssh/github_deploy
          echo "Key file size: $(wc -c < ~/.ssh/github_deploy)"

          ssh-keyscan -H 80.65.208.176 >> ~/.ssh/known_hosts

          # Start ssh-agent
          eval $(ssh-agent -s)

          # Create expect script
          cat << 'EXPECT_SCRIPT' > add_key.exp
          #!/usr/bin/expect -f
          set passphrase [lindex $argv 0]
          spawn ssh-add ~/.ssh/github_deploy
          expect "Enter passphrase"
          send "$passphrase\r"
          expect eof
          EXPECT_SCRIPT

          chmod +x add_key.exp

          # Run expect script with passphrase
          ./add_key.exp "$SSH_PASSPHRASE"

          # List added keys
          ssh-add -l

          # Test connection
          ssh -v -o StrictHostKeyChecking=no root@80.65.208.176 'echo "Test connection"'

      - name: Deploy
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          eval $(ssh-agent -s)

          # Use the same expect script
          ./add_key.exp "$SSH_PASSPHRASE"

          echo "$ENV_VARS" > .env.tmp

          ssh -o StrictHostKeyChecking=no root@80.65.208.176 'cd /root/cladbe_server && \
          git pull origin main && \
          npm install && \
          pm2 stop ecosystem.config.js || true && \
          pm2 delete ecosystem.config.js || true && \
          pm2 flush && \
          pm2 start ecosystem.config.js --env production --no-autorestart'
