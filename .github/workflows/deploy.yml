name: Deploy to Production Server

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "18"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/github_deploy
          chmod 600 ~/.ssh/github_deploy
          ssh-keyscan -H 80.65.208.176 >> ~/.ssh/known_hosts

          # Verify SSH key
          echo "=== Verifying SSH Key ==="
          ssh-keygen -l -f ~/.ssh/github_deploy

          # Test SSH connection
          ssh -i ~/.ssh/github_deploy -o StrictHostKeyChecking=no root@80.65.208.176 'echo "SSH connection successful"'

      - name: Check Server Status
        run: |
          ssh -i ~/.ssh/github_deploy root@80.65.208.176 '
            echo "=== System Resources ===" && \
            free -m && \
            df -h && \
            ulimit -n && \
            sysctl fs.file-max && \
            pm2 list || echo "PM2 not running"
          '

      - name: Prepare Environment Variables
        env:
          ENV_VARS: ${{ secrets.ENV_VARS }}
        run: |
          echo "$ENV_VARS" > .env.production

          # Verify env file creation (without showing contents)
          if [ -f .env.production ]; then
            echo "Environment file created successfully"
          else
            echo "Failed to create environment file"
            exit 1
          fi

      - name: Deploy Application
        run: |
          scp -i ~/.ssh/github_deploy .env.production root@80.65.208.176:/root/cladbe_server/.env

          ssh -i ~/.ssh/github_deploy root@80.65.208.176 'bash -s' << 'ENDSSH'
            set -e  # Exit on any error
            
            echo "=== Starting Deployment ==="
            
            # Set system limits
            ulimit -n 65535
            echo "File descriptor limit set to: $(ulimit -n)"
            
            # Navigate to project directory
            cd /root/cladbe_server
            
            # Backup current version
            timestamp=$(date +%Y%m%d_%H%M%S)
            git tag -a "backup_$timestamp" -m "Backup before deployment"
            
            # Update code
            echo "Pulling latest changes..."
            git pull origin main
            
            # Install dependencies
            echo "Installing dependencies..."
            npm ci --production || npm install --production
            
            # PM2 process management
            echo "Managing PM2 processes..."
            pm2 stop ecosystem.config.js || true
            pm2 delete ecosystem.config.js || true
            pm2 flush
            
            # Clear Node.js cache
            npm cache clean --force
            
            # Start application
            echo "Starting application..."
            NODE_ENV=production pm2 start ecosystem.config.js --env production --no-autorestart
            
            # Verify deployment
            sleep 5
            if pm2 list | grep -q "online"; then
              echo "=== Deployment Successful ==="
              pm2 list
            else
              echo "=== Deployment Failed ==="
              pm2 logs --lines 50
              exit 1
            fi
            
            # Monitor resources
            echo "=== Resource Usage ==="
            free -m
            df -h
            
            # Save PM2 process list
            pm2 save
          ENDSSH

      - name: Verify Deployment
        if: success()
        run: |
          echo "=== Verifying Deployment ==="
          ssh -i ~/.ssh/github_deploy root@80.65.208.176 '
            if curl -s http://localhost:3000/health 2>&1 > /dev/null; then
              echo "Application is responding"
              exit 0
            else
              echo "Application is not responding"
              pm2 logs --lines 20
              exit 1
            fi
          '

      - name: Cleanup
        if: always()
        run: |
          rm -f .env.production
          echo "=== Deployment Complete ==="
